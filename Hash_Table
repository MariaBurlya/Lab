#include <iostream>
#include <vector>
#include <string>

using namespace std; 

class HashTable {
    private:
    vector<pair<string, string>> table; // хранение пар ключ-значение
    int size; // размер таблицы
    int now_size; // текущий размер

    int hash_func(const string& key) { // хеширование для получение индекса на основе ключа
        int hash = 0;
        for (char ch : key) {
            hash += ch; // суммирует коды символов ключа
        }
        return hash % size; // возврат индекса в пределах размера таблицы
    }

    public:
    // конструктор таблицы с инициализацией размера и резервом места
    HashTable(int s) : size(s), now_size(0) {
        table.resize(size, {"",""}); // заполяем вектор пустыми парами
    }

    void HSET(const string& key, const string& value) { // добавление элементов
        if (now_size >= size) {
            cout << "Таблица полна. Добавить ключ-значение невозможно" << endl;
            return;
        }
        int index = hash_func(key); // получаем индекс
        if (table[index].first == key) {
            cout << "Ключ уже существует. Повторите попытку" << endl;
            return;
        }
        while (table[index].first != "") { // поиск первого свободного индекса
            index = (index + 1) % size;
        }

        table[index] = {key, value}; // добавление пары ключ-значение
        now_size++;
        cout << "Элемент добавлен" << endl;
        }

    void HDEL(const string& key) { // удаление элемента
        int index = hash_func(key); // получаем индекс
        for (int i = 0; i < size; ++i) {
            int now_index = (index + i) % size; // обработка коллизий
            if (table[now_index].first == key) {
                table[now_index] = {"",""}; // удаление элемента
                now_size--;
                cout << "Элемент удален" << endl;
                return;
            }
            if (table[now_index].first == "") { // встреча пустой клетки
                break;
            }
        }
        cout << "Ключ не найден. Удаление не возможно" << endl;
    }

    void HGET(const string& key) { // получение значения по ключу
        int index = hash_func(key);
        for (int i = 0; i < size; ++i) {
            int now_index = (index + i) % size; // обработка коллизий
            if (table[now_index].first == key) {
                cout << "Значение для введенного ключа: " << table[now_index].second << endl;
                return;
            }
            if (table[now_index].first == "") { // встреча пустой клетки
                break;
            }
        }
        cout << "Ключ не найден" << endl;
    }

    void PRINT() { // вывод всей таблицы
        cout << "Содержимое хеш-таблицы: " << endl;
        for (int i = 0; i < size; ++i) {
            if (table[i].first != "") {
                cout << "Индекс " << i << ":{" << table[i].first << ":" << table[i].second << "}" << endl;
            }
        }
    }
};

int main() {
    HashTable H(10); // таблица размером 10
    string command, key, value;

    while (true) {
        cout << "Введите команду HSET, HDEL, HGET, PRINT, EXIT: ";
        cin >> command;

        if (command == "EXIT") {
            break;
        }

        else if (command == "HSET") {
            cout << "Введите ключ: ";
            cin >> key;
            cout << "Введите значение: ";
            cin >> value;
            H.HSET(key, value);
        }

        else if (command == "HDEL") {
            cout << "Введите ключ: ";
            cin >> key;
            H.HDEL(key);
        }

        else if (command == "HGET") {
            cout << "Введите ключ: ";
            cin >> key;
            H.HGET(key);
        }

        else if (command == "PRINT") {
            H.PRINT();
        }

        else {
            cout << "Неизвестная команда" << endl;
        }
    }
    return 0;
}
